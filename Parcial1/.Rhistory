})
# Convertir datos a formato largo para ggplot
arl_long <- lapply(arl_data, function(df) {
df_long <- tidyr::pivot_longer(df, cols = c(ARL_in_control, ARL_out_of_control),
names_to = "phase", values_to = "ARL")
df_long$phase <- factor(df_long$phase, levels = c("ARL_in_control", "ARL_out_of_control"),
labels = c("En control", "Fuera de control"))
return(df_long)
})
# Graficar utilizando ggplot2
ggplot(arl_long[[1]], aes(x = simulation_number, y = ARL, color = phase, linetype = phase)) +
geom_line() +
labs(x = "Número de simulaciones", y = "ARL",
title = "Simulación del ARL para Cartas R (n = 3)") +
scale_color_manual(values = c("#ae0001", "#eeba30")) +
scale_linetype_manual(values = c("solid","solid")) +
theme_light()
ggplot(arl_long[[2]], aes(x = simulation_number, y = ARL, color = phase, linetype = phase)) +
geom_line() +
labs(x = "Número de simulaciones", y = "ARL",
title = "Simulación del ARL para Cartas R (n = 10)") +
scale_color_manual(values = c("#ae0001", "#eeba30")) +
scale_linetype_manual(values = c("solid", "solid")) +
theme_light()
# Establecer semilla aleatoria para reproducibilidad
set.seed(123)
# Simular ARL para diferentes tamaños de muestra
arl_data <- lapply(n_values, function(n) {
simulate_R_chart_ARL_both_phases(n, sigma, control_limits, num_simulations)
})
# Convertir datos a formato largo para ggplot
arl_long <- lapply(arl_data, function(df) {
df_long <- tidyr::pivot_longer(df, cols = c(ARL_in_control, ARL_out_of_control),
names_to = "phase", values_to = "ARL")
df_long$phase <- factor(df_long$phase, levels = c("ARL_in_control", "ARL_out_of_control"),
labels = c("En control", "Fuera de control"))
return(df_long)
})
# Graficar utilizando ggplot2
ggplot(arl_long[[1]], aes(x = simulation_number, y = ARL, color = phase, linetype = phase)) +
geom_line() +
labs(x = "Número de simulaciones", y = "ARL",
title = "Simulación del ARL para Cartas R (n = 3)") +
scale_color_manual(values = c("#ae0001", "#eeba30")) +
scale_linetype_manual(values = c("solid","solid")) +
theme_light()
ggplot(arl_long[[2]], aes(x = simulation_number, y = ARL, color = phase, linetype = phase)) +
geom_line() +
labs(x = "Número de simulaciones", y = "ARL",
title = "Simulación del ARL para Cartas R (n = 10)") +
scale_color_manual(values = c("#ae0001", "#eeba30")) +
scale_linetype_manual(values = c("solid", "solid")) +
theme_light()
# Establecer semilla aleatoria para reproducibilidad
set.seed(123)
# Simular ARL para diferentes tamaños de muestra
arl_data <- lapply(n_values, function(n) {
simulate_R_chart_ARL_both_phases(n, sigma, control_limits, num_simulations)
})
# Convertir datos a formato largo para ggplot
arl_long <- lapply(arl_data, function(df) {
df_long <- tidyr::pivot_longer(df, cols = c(ARL_in_control, ARL_out_of_control),
names_to = "phase", values_to = "ARL")
df_long$phase <- factor(df_long$phase, levels = c("ARL_in_control", "ARL_out_of_control"),
labels = c("En control", "Fuera de control"))
return(df_long)
})
# Graficar utilizando ggplot2
ggplot(arl_long[[1]], aes(x = simulation_number, y = ARL, color = phase, linetype = phase)) +
geom_line() +
labs(x = "Número de simulaciones", y = "ARL",
title = "Simulación del ARL para Cartas R (n = 3)") +
scale_color_manual(values = c("#ae0001", "#eeba30")) +
scale_linetype_manual(values = c("solid","solid")) +
theme_light()
ggplot(arl_long[[2]], aes(x = simulation_number, y = ARL, color = phase, linetype = phase)) +
geom_line() +
labs(x = "Número de simulaciones", y = "ARL",
title = "Simulación del ARL para Cartas R (n = 10)") +
scale_color_manual(values = c("#ae0001", "#eeba30")) +
scale_linetype_manual(values = c("solid", "solid")) +
theme_light()
library(markovchain)
#install.packages("markovchain")
#install.packages("DiagrammeR")
#install.packages("diagram")
library(markovchain)
library(diagram)
library(DiagrammeR)
# plot a diagram using DiagrammeR for a markovchain object
.plotDiagrammeR <- function(object, node_fill_color = "lightblue", ...) {
if(is(object,"markovchain")){
mat <- object@transitionMatrix
} else if(is(object,"ctmc")){
mat <- object@generator
}
names <- rownames(mat)
# names of nodes
nodes <- ''
for(i in 1:nrow(mat)) {
nodes <- paste0(nodes, names[i], ' [fillcolor = "', node_fill_color, '"]; ')
}
# store edges
edges <- ''
for(i in 1:nrow(mat)) {
for(j in 1:ncol(mat)) {
if (mat[i,j] != 0) {
edges <- paste0(edges, names[i], "->", names[j], " [label = ", mat[i,j], "] ")
}
}
}
# extract extra parameter
dots <- list(...)
args <- ""
for(name in names(dots)) {
args <- paste0(args, name, "=\"", dots[[name]], "\" ")
}
# print(args)
if (requireNamespace("DiagrammeR", quietly = TRUE)) {
res <- DiagrammeR::grViz(paste0("
digraph circles {
graph [overlap = true, fontsize = 10]
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
", nodes, "
", edges, args,"
// labelfontsize = 20 labelloc='t' label ='Weather transition matrix'
}
"))
return (res)
} else {
print("Diagrammer unavailable")
}
}
# Definir la matriz
P<- matrix(c(0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 1, 0,
1/3, 1/3, 1/3, 0, 0, 0,
1, 0, 0, 0, 0, 0,
0, 1/2, 0, 0, 0, 1/2), nrow = 6, byrow = TRUE);P
# Creamos la matriz de transicion
mc = new("markovchain",transitionMatrix=P,states=c("0","1","2","3","4","5"),
name="Cadena 1")
str(mc);show(mc) #Se explora la clase del objeto que se creo con la funcion anterior
summary(mc) # Se explora el contenido del objeto mc
#Visualizacion de la cadena
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
###### Punto 1a:  Clasificar los estados a las clases
# Etiquetas de cadena para los estados
etiquetas <- c("Estado1", "Estado2", "Estado3", "Estado4", "Estado5", "Estado6")
# Crear un vector con las etiquetas de cadena para cada estado
cadenas_estados <- rep(etiquetas, each = nrow(P))
# Mostrar los estados y sus etiquetas de cadena
for (i in 1:length(cadenas_estados)) {
cat("Estado", i, ":", cadenas_estados[i], "\n")
}
# Definir la matriz de transición
P <- matrix(c(0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 1, 0,
1/3, 1/3, 1/3, 0, 0, 0,
1, 0, 0, 0, 0, 0,
0, 1/2, 0, 0, 0, 1/2), nrow = 6, byrow = TRUE)
# Crear objeto markovchain
mc <- new("markovchain", states = c("A", "B", "C", "D", "E", "F"), transitionMatrix = P)
str(mc);show(mc) #Se explora la clase del objeto que se creo con la funcion anterior
summary(mc) # Se explora el contenido del objeto mc
#Visualizacion de la cadena
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
###### Punto 1a:  Clasificar los estados a las clases
# Etiquetas de cadena para los estados
etiquetas <- c("Estado1", "Estado2", "Estado3", "Estado4", "Estado5", "Estado6")
# Crear un vector con las etiquetas de cadena para cada estado
cadenas_estados <- rep(etiquetas, each = nrow(P))
# Mostrar los estados y sus etiquetas de cadena
for (i in 1:length(cadenas_estados)) {
cat("Estado", i, ":", cadenas_estados[i], "\n")
}
print(classes)
# 1. Clasificar los estados en clases
classes <- classifyStates(mc)
# 1. Clasificar los estados en clases comunicantes
communicating_classes <- communicatingClasses(mc)
print("Clases de estados comunicantes:")
print(communicating_classes)
# 2. Determinar la recurrencia de cada estado
recurrent_states <- recurrentStates(mc)
print("Estados recurrentes:")
print(recurrent_states)
# 3. Calcular el período de cada clase recurrente
periods <- period(mc)
print("Período de las clases recurrentes:")
print(periods)
# 3. Calcular el período de cada clase recurrente
periods <- period(communicating_classes)
# 3. Calcular el período de cada clase recurrente
periods <- period(communicating_classes)
# 3. Calcular el período de cada clase recurrente
calculatePeriod <- function(transition_matrix) {
n <- nrow(transition_matrix)
periods <- numeric(n)
for (i in 1:n) {
visited <- logical(n)
visited[i] <- TRUE
current_states <- which(transition_matrix[i,] > 0)
period <- 1
while (length(current_states) > 0) {
next_states <- rep(0, n)
for (state in current_states) {
if (!visited[state]) {
visited[state] <- TRUE
next_states <- union(next_states, which(transition_matrix[state,] > 0))
}
}
current_states <- next_states[next_states != 0]
period <- period + 1
}
periods[i] <- period
}
return(periods)
}
# Calcular el período de cada estado
periods <- calculatePeriod(P)
print("Período de cada estado:")
print(periods)
# 3. Calcular el período de cada clase recurrente
periods <- sapply(recurrent_classes, function(class_indices) {
period(mc[rownames(mc) %in% class_indices, rownames(mc) %in% class_indices])
})
str(mc);show(mc) #Se explora la clase del objeto que se creo con la funcion anterior
summary(mc) # Se explora el contenido del objeto mc
# 1. Clasificar los estados en clases comunicantes
mc$A
# 2. Determinar la recurrencia de cada estado
recurrent_states <- recurrentStates(mc)
print("Estados recurrentes:")
print(recurrent_states)
# 3. Calcular el período de cada clase recurrente
C1 <- new("markovchain", transitionMatrix = P[c(1,3,5), c(1,3,5)])
C2 <- new("markovchain", transitionMatrix = P[[c(2,6), c(2,6)])
C2 <- new("markovchain", transitionMatrix = P[c(2,6), c(2,6)])
cbind(period(C1), period(C2))
str(mc);show(mc) #Se explora la clase del objeto que se creo con la funcion anterior
summary(mc) # Se explora el contenido del objeto mc
# Punto 2
P <- matrix(c(1,0,0,0,0,
0.2,0.1,0.7,0,0,
0.12,0,0.08,0.8,0,
0.04,0,0,0.06,0.9,
0,0,0,0,1), nrow = 5, byrow = TRUE)
P
mc <- new("markovchain", transitionMatrix = P,
states = c("B","1","2","3","G")) #Donde B y G significan Baja y Grado
summary(mc)
CanoniMa <- matrix(c(1.00,0.00,0.00,0.00,0.00,
0.00,1.00,0.00,0.00,0.00,
0.20,0.00,0.10,0.70,0.00,
0.12,0.00,0.00,0.08,0.80,
0.04,0.90,0.00,0.00,0.06),
nrow = 5, byrow = TRUE,
dimnames = list(c("B","G","1","2","3"),
c("B","G","1","2","3")))
CanoniMa
solve(diag(1,3,3) - CanoniMa[c(3,4,5), c(3,4,5)])
M <- solve(diag(1,3,3) - CanoniMa[c(3,4,5), c(3,4,5)])
M %*% CanoniMa[c(3,4,5), c(1,2)]
absorptionProbabilities(mc)
n <- ceiling(500/MA[1,2])
Pr <- absorptionProbabilities(mc)
n <- ceiling(500/Pr[1,2])
n
Años <- ceiling(n/50/2)
Años
P <- matrix(c(1,0,0,0,0,
0.2,0.1,0.7,0,0,
0.12,0,0.08,0.8,0,
0.04,0,0,0.06,0.9,
0,0,0,0,1), nrow = 5, byrow = TRUE)
mc <- new("markovchain", transitionMatrix = P,
states = c("B","1","2","3","G"))
#Donde B y G significan Baja y Grado
CanoniMa <- matrix(c(1.00,0.00,0.00,0.00,0.00,
0.00,1.00,0.00,0.00,0.00,
0.20,0.00,0.10,0.70,0.00,
0.12,0.00,0.00,0.08,0.80,
0.04,0.90,0.00,0.00,0.06),
nrow = 5, byrow = TRUE,
dimnames = list(c("B","G","1","2","3"),
c("B","G","1","2","3")))
CanoniMa
M <- solve(diag(1,3,3) - CanoniMa[c(3,4,5), c(3,4,5)]); M
#Probabilidades de Absorcion
M %*% CanoniMa[c(3,4,5), c(1,2)]
Pr <- absorptionProbabilities(mc);Pr
n <- ceiling(500/Pr[1,2]);n
Años <- ceiling(n/50/2);Años
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
setwd("~/DOCUMENTOS PERSONAJES/CESAR/Procesos/Parcial1")
# plot a diagram using DiagrammeR for a markovchain object
.plotDiagrammeR <- function(object, node_fill_color = "lightblue", ...) {
if(is(object,"markovchain")){
mat <- object@transitionMatrix
} else if(is(object,"ctmc")){
mat <- object@generator
}
names <- rownames(mat)
# names of nodes
nodes <- ''
for(i in 1:nrow(mat)) {
nodes <- paste0(nodes, names[i], ' [fillcolor = "', node_fill_color, '"]; ')
}
# store edges
edges <- ''
for(i in 1:nrow(mat)) {
for(j in 1:ncol(mat)) {
if (mat[i,j] != 0) {
edges <- paste0(edges, names[i], "->", names[j], " [label = ", mat[i,j], "] ")
}
}
}
# extract extra parameter
dots <- list(...)
args <- ""
for(name in names(dots)) {
args <- paste0(args, name, "=\"", dots[[name]], "\" ")
}
# print(args)
if (requireNamespace("DiagrammeR", quietly = TRUE)) {
res <- DiagrammeR::grViz(paste0("
digraph circles {
graph [overlap = true, fontsize = 10]
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
", nodes, "
", edges, args,"
// labelfontsize = 20 labelloc='t' label ='Weather transition matrix'
}
"))
return (res)
} else {
print("Diagrammer unavailable")
}
}
library(DiagrammeR)
#install.packages("markovchain")
#install.packages("DiagrammeR")
#install.packages("diagram")
library(markovchain)
library(diagram)
library(DiagrammeR)
# plot a diagram using DiagrammeR for a markovchain object
.plotDiagrammeR <- function(object, node_fill_color = "lightblue", ...) {
if(is(object,"markovchain")){
mat <- object@transitionMatrix
} else if(is(object,"ctmc")){
mat <- object@generator
}
names <- rownames(mat)
# names of nodes
nodes <- ''
for(i in 1:nrow(mat)) {
nodes <- paste0(nodes, names[i], ' [fillcolor = "', node_fill_color, '"]; ')
}
# store edges
edges <- ''
for(i in 1:nrow(mat)) {
for(j in 1:ncol(mat)) {
if (mat[i,j] != 0) {
edges <- paste0(edges, names[i], "->", names[j], " [label = ", mat[i,j], "] ")
}
}
}
# extract extra parameter
dots <- list(...)
args <- ""
for(name in names(dots)) {
args <- paste0(args, name, "=\"", dots[[name]], "\" ")
}
# print(args)
if (requireNamespace("DiagrammeR", quietly = TRUE)) {
res <- DiagrammeR::grViz(paste0("
digraph circles {
graph [overlap = true, fontsize = 10]
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
", nodes, "
", edges, args,"
// labelfontsize = 20 labelloc='t' label ='Weather transition matrix'
}
"))
return (res)
} else {
print("Diagrammer unavailable")
}
}
# Definir la matriz de transición
P <- matrix(c(0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 1, 0,
1/3, 1/3, 1/3, 0, 0, 0,
1, 0, 0, 0, 0, 0,
0, 1/2, 0, 0, 0, 1/2), nrow = 6, byrow = TRUE)
# Crear objeto markovchain
mc <- new("markovchain", states = c("A", "B", "C", "D", "E", "F"), transitionMatrix = P)
#Visualizacion de la cadena
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
str(mc);show(mc) #Se explora la clase del objeto que se creo con la funcion anterior
summary(mc) # Se explora el contenido del objeto mc
# 1. Clasificar los estados en clases comunicantes
communicating_classes <- communicatingClasses(mc)
print("Clases de estados comunicantes:")
print(communicating_classes)
print("Clases de estados comunicantes:", communicating_classes)
# 2. Determinar la recurrencia de cada estado
recurrent_states <- recurrentStates(mc)
print("Estados recurrentes:")
print(recurrent_states)
# 3. Calcular el período de cada clase recurrente
C1 <- new("markovchain", transitionMatrix = P[c(1,3,5), c(1,3,5)])
C2 <- new("markovchain", transitionMatrix = P[c(2,6), c(2,6)])
cbind(period(C1), period(C2))
P <- matrix(c(1,0,0,0,0,
0.2,0.1,0.7,0,0,
0.12,0,0.08,0.8,0,
0.04,0,0,0.06,0.9,
0,0,0,0,1), nrow = 5, byrow = TRUE)
mc <- new("markovchain", transitionMatrix = P,
states = c("B","1","2","3","G"))
#Donde B y G significan Baja y Grado
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
CanoniMa <- matrix(c(1.00,0.00,0.00,0.00,0.00,
0.00,1.00,0.00,0.00,0.00,
0.20,0.00,0.10,0.70,0.00,
0.12,0.00,0.00,0.08,0.80,
0.04,0.90,0.00,0.00,0.06),
nrow = 5, byrow = TRUE,
dimnames = list(c("B","G","1","2","3"),
c("B","G","1","2","3")))
CanoniMa
M <- solve(diag(1,3,3) - CanoniMa[c(3,4,5), c(3,4,5)]); M
#Probabilidades de Absorcion
Pr <- absorptionProbabilities(mc);Pr
n <- ceiling(500/Pr[1,2]);n
Años <- ceiling(n/50/2);Años
mc
P <- matrix(c(0,0.5,0,0.5,0,
+ 0.5,0,0.5,0,0,
+ 0,0.5,0,0.5,0,
+ 0,0,0.5,0,0.5,
+ 0,0,0,0.5,0.5), byrow = TRUE, ncol = 5)
mc <- new("markovchain", transitionMatrix = P, states = c(’-2’,’-1’,’0’,’1’,’2’))
mc
mc <- new("markovchain", transitionMatrix = P, states = c("-2","-1","0","1","2"))
mc
steadyStates(mc)
#Visualizacion de la cadena
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
steadyStates(mc)
#### PUNTO 4 -----------------------
P <- matrix(c(1,0,0,0,0,0,0,0,
0.6,0,0.4,0,0,0,0,0,
0,0.6,0,0.4,0,0,0,0,
0,0,0.6,0,0.4,0,0,0,
0,0,0,0.6,0,0.4,0,0,
0,0,0,0,0.6,0,0.4,0,
0,0,0,0,0,0.6,0,0.4,
0,0,0,0,0,0,0,1), nrow = 8, byrow = TRUE)
mc <- new("markovchain", transitionMatrix = P,
states = c("0","1","2","3","4","5","6","7"))
#Visualizacion de la cadena
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
summary(mc)
MA <- absorptionProbabilities(mc); MA
M <- absorptionProbabilities(mc); M
P <- matrix(c(0,1/3,1/3,1/3,0,
0.5,0,0.5,0,0,
0,0.5,0,0.5,0,
0,0,0.5,0,0.5,
0,1/3,1/3,1/3,0), byrow = TRUE, ncol = 5)
#Visualizacion de la cadena
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
mc <- new("markovchain", transitionMatrix = P, states = c("-2","-1","0","1","2"));mc
steadyStates(mc)
P <- matrix(c(0,1/3,1/3,1/3,0,
0.5,0,0.5,0,0,
0,0.5,0,0.5,0,
0,0,0.5,0,0.5,
0,1/3,1/3,1/3,0), byrow = TRUE, ncol = 5)
#Visualizacion de la cadena
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
P <- matrix(c(0,1/3,1/3,1/3,0,
0.5,0,0.5,0,0,
0,0.5,0,0.5,0,
0,0,0.5,0,0.5,
0,1/3,1/3,1/3,0), byrow = TRUE, ncol = 5)
#Visualizacion de la cadena
set.seed(2)
.plotDiagrammeR(mc, node_fill_color = "lightblue", label = "Matrix de transición", labelloc = "t")
mc <- new("markovchain", transitionMatrix = P, states = c("-2","-1","0","1","2"));mc
steadyStates(mc)
