A <- rbind(Q, rep(1, N))  # Añadir la condición de normalización
b <- c(rep(0, N), 1)     # El vector b incluye la normalización
# Resolver el sistema lineal
pi <- try(solve(A, b), silent = TRUE)
# Verificar si la solución fue exitosa
if (inherits(pi, "try-error")) {
warning("El sistema de ecuaciones no tiene solución única o el proceso es inestable.")
return(NULL)
}
return(pi)
}
# Crear la matriz de tasas
Q <- create_transition_matrix(lambda, mu, N)
# Calcular la distribución estacionaria
pi <- calculate_stationary_distribution(Q)
# Mostrar la distribución estacionaria
if (!is.null(pi)) {
print("Distribución estacionaria:")
print(pi)
} else {
print("No se pudo calcular la distribución estacionaria.")
}
# Parámetros del proceso
lambda <- 0.3  # Tasa de nacimiento constante
mu <- 0.4  # Tasa de muerte proporcional al número de individuos
N <- 5  # Número de estados
# Crear la matriz de tasas Q para el proceso de nacimiento y muerte
create_transition_matrix <- function(lambda, mu, N) {
Q <- matrix(0, nrow=N, ncol=N)
for (i in 1:N) {
if (i < N) {
Q[i, i + 1] <- lambda  # Tasa de nacimiento
}
if (i > 1) {
Q[i, i - 1] <- i * mu  # Tasa de muerte
}
}
return(Q)
}
# Calcular la distribución estacionaria usando el método de balance de flujo
calculate_stationary_distribution <- function(Q) {
N <- nrow(Q)
A <- rbind(Q, rep(1, N))  # Añadir la condición de normalización
b <- c(rep(0, N), 1)     # El vector b incluye la normalización
# Resolver el sistema lineal
pi <- try(solve(A, b), silent = TRUE)
# Verificar si la solución fue exitosa
if (inherits(pi, "try-error")) {
warning("El sistema de ecuaciones no tiene solución única o el proceso es inestable.")
return(NULL)
}
return(pi)
}
# Crear la matriz de tasas
Q <- create_transition_matrix(lambda, mu, N)
# Calcular la distribución estacionaria
pi <- calculate_stationary_distribution(Q)
# Mostrar la distribución estacionaria
if (!is.null(pi)) {
print("Distribución estacionaria:")
print(pi)
} else {
print("No se pudo calcular la distribución estacionaria.")
}
N <- 10  # Número de estados
# Crear la matriz de tasas Q para el proceso de nacimiento y muerte
create_transition_matrix <- function(lambda, mu, N) {
Q <- matrix(0, nrow=N, ncol=N)
for (i in 1:N) {
if (i < N) {
Q[i, i + 1] <- lambda  # Tasa de nacimiento
}
if (i > 1) {
Q[i, i - 1] <- i * mu  # Tasa de muerte
}
}
return(Q)
}
# Calcular la distribución estacionaria usando el método de balance de flujo
calculate_stationary_distribution <- function(Q) {
N <- nrow(Q)
A <- rbind(Q, rep(1, N))  # Añadir la condición de normalización
b <- c(rep(0, N), 1)     # El vector b incluye la normalización
# Resolver el sistema lineal
pi <- try(solve(A, b), silent = TRUE)
# Verificar si la solución fue exitosa
if (inherits(pi, "try-error")) {
warning("El sistema de ecuaciones no tiene solución única o el proceso es inestable.")
return(NULL)
}
return(pi)
}
# Crear la matriz de tasas
Q <- create_transition_matrix(lambda, mu, N)
# Calcular la distribución estacionaria
pi <- calculate_stationary_distribution(Q)
# Mostrar la distribución estacionaria
if (!is.null(pi)) {
print("Distribución estacionaria:")
print(pi)
} else {
print("No se pudo calcular la distribución estacionaria.")
}
Q
# Función para calcular la matriz de tasas de transición Q
compute_transition_matrix <- function(lambda, mu, N) {
Q <- matrix(0, nrow=N, ncol=N)
for (i in 1:N) {
if (i < N) {
Q[i, i+1] <- lambda
}
if (i > 1) {
Q[i, i-1] <- i * mu
}
}
return(Q)
}
# Parámetros del proceso
lambda <- 1  # Tasa de nacimiento
mu <- 1  # Tasa de muerte
N <- 10  # Número de estados
# Calcular la matriz de tasas de transición
Q <- compute_transition_matrix(lambda, mu, N)
# Imprimir la matriz de tasas de transición
print("Matriz de tasas de transición Q:")
print(Q)
# Balance de flujo: pi * Q = 0
# Agregar la condición de normalización: sum(pi) = 1
A <- rbind(Q, rep(1, N))
b <- c(rep(0, N), 1)
# Resolver el sistema lineal para pi
pi <- solve(A, b)
# Mostrar la distribución estacionaria
print("Distribución estacionaria:")
print(pi)
# Visualizar la distribución estacionaria
barplot(pi, main="Distribución Estacionaria del Proceso de Nacimiento y Muerte",
xlab="Estado", ylab="Probabilidad", col="lightblue", ylim=c(0, max(pi)*1.2))
# Función para calcular la matriz de tasas de transición Q
compute_transition_matrix <- function(lambda, mu, N) {
Q <- matrix(0, nrow=N, ncol=N)
for (i in 1:N) {
if (i < N) {
Q[i, i+1] <- lambda
}
if (i > 1) {
Q[i, i-1] <- i * mu
}
}
return(Q)
}
# Parámetros del proceso
lambda <- 1  # Tasa de nacimiento
mu <- 1  # Tasa de muerte
N <- 10  # Número de estados
# Calcular la matriz de tasas de transición
Q <- compute_transition_matrix(lambda, mu, N)
# Imprimir la matriz de tasas de transición
print("Matriz de tasas de transición Q:")
print(Q)
# Crear la matriz A para resolver pi * Q = 0
A <- cbind(Q, rep(1, N))  # Añadir columna de unos para la condición de normalización
b <- c(rep(0, N), 1)  # La última entrada es 1 para la normalización
# Resolver el sistema lineal para pi
pi <- solve(A, b)
# Mostrar la distribución estacionaria
print("Distribución estacionaria:")
print(pi[1:N])
# Visualizar la distribución estacionaria
barplot(pi[1:N], main="Distribución Estacionaria del Proceso de Nacimiento y Muerte",
xlab="Estado", ylab="Probabilidad", col="lightblue", ylim=c(0, max(pi[1:N])*1.2))
# Graficar la matriz de tasas de transición
heatmap(Q, Rowv=NA, Colv=NA, col=heat.colors(256), scale="none",
main="Matriz de tasas de transición Q", xlab="Estado", ylab="Estado")
# Función para la intensidad lambda1(t)
lambda_1 <- function(t) {
return(exp(-t / 5) + t / 5)
}
# Función para la intensidad lambda2(t)
lambda_2 <- function(t) {
return(1/2 * sqrt(t / 2))
}
# Función para simular el proceso de Poisson no homogéneo
simulate_non_homogeneous_process <- function(lambda_func, Time) {
# Inicialización del vector de tiempos de llegada
PP <- numeric(1)
PP[1] <- 0  # Comenzando en el tiempo 0
i <- 1
while (PP[i] < Time) {
# Generar un tiempo candidato usando la cota superior de lambda_func
t <- PP[i] - (1 / lambda_func(PP[i]) * log(1 - runif(1)))
# Paso de aceptación-rechazo
if (runif(1) <= lambda_func(t) / lambda_func(PP[i])) {
i <- i + 1
PP[i] <- t
}
}
# Eliminar el último elemento si excede el intervalo de tiempo
if (PP[i] > Time) {
PP <- PP[-i]
}
return(PP)
}
# Intervalo de simulación
Time <- 5000
# Simulación del proceso de Poisson no homogéneo con lambda1(t)
PP1 <- simulate_non_homogeneous_process(lambda_1, Time)
# Simulación del proceso de Poisson no homogéneo con lambda2(t)
PP2 <- simulate_non_homogeneous_process(lambda_2, Time)
# Graficar los resultados
par(mfrow=c(2,1))  # Dos gráficos en una fila
plot(PP1, seq(1, length(PP1)), type='s', xlab="Tiempo", ylab="Número de llegadas en [0,T]",
main="Camino de muestra del proceso de Poisson no homogéneo con lambda1(t)", xlim=c(0, Time), ylim=c(0, length(PP1)+1))
plot(PP2, seq(1, length(PP2)), type='s', xlab="Tiempo", ylab="Número de llegadas en [0,T]",
main="Camino de muestra del proceso de Poisson no homogéneo con lambda2(t)", xlim=c(0, Time), ylim=c(0, length(PP2)+1))
# Función para simular el proceso de nacimiento puro
simulate_birth_process <- function(lambda, T) {
# Inicialización del vector de tiempos de llegada
PP <- numeric(1)
PP[1] <- 0  # Comenzando en el tiempo 0
i <- 1
while(PP[i] < T) {
i <- i + 1
PP <- c(PP, PP[i-1] - (1 / lambda) * log(1 - runif(1)))
}
# Eliminar el último elemento si excede el intervalo de tiempo
if (PP[i] > T) {
PP <- PP[-i]
}
return(PP)
}
# Parámetros
T <- 50  # Tiempo de simulación
lambda1 <- 1  # Valor de lambda para el primer caso
lambda2 <- 4  # Valor de lambda para el segundo caso
# Simulación para el primer caso
PP1 <- simulate_birth_process(lambda1, T)
# Simulación para el segundo caso
PP2 <- simulate_birth_process(lambda2, T)
# Graficar los resultados
par(mfrow=c(2,1))  # Dos gráficos en una fila
plot(PP1, seq(1:length(PP1)), type='s', xlab="Tiempo", ylab="Número de llegadas en [0,T]",
main=paste("Proceso de nacimiento puro con lambda =", lambda1), xlim=c(0, T), ylim=c(0, length(PP1)+1))
plot(PP2, seq(1:length(PP2)), type='s', xlab="Tiempo", ylab="Número de llegadas en [0,T]",
main=paste("Proceso de nacimiento puro con lambda =", lambda2), xlim=c(0, T), ylim=c(0, length(PP2)+1))
plot(tiempos1)
# Función para simular un proceso de Poisson no homogéneo
simular_poisson_no_homogeneo <- function(lambda, T) {
t <- 0
tiempos <- c()
while (t < T) {
# Usamos una intensidad máxima lambda_max para el rechazo
lambda_max <- 1.5  # Escoge un valor mayor que la máxima intensidad de lambda(t)
u1 <- runif(1)
# Proponer un tiempo de llegada
t <- t - log(u1) / lambda_max
if (t > T) break
# Aceptación o rechazo del tiempo propuesto
u2 <- runif(1)
if (u2 <= lambda(t) / lambda_max) {
tiempos <- c(tiempos, t)
}
}
return(tiempos)
}
lambda1 <- function(t) {
return(exp(-t / 5) + t / 5)
}
lambda2 <- function(t) {
return(0.5 * sqrt(t / 2))
}
# Simular un proceso de Poisson no homogéneo con intensidad lambda1(t)
set.seed(123)
tiempos1 <- simular_poisson_no_homogeneo(lambda1, 5000)
tiempos2 <- simular_poisson_no_homogeneo(lambda2, 5000)
# Ver los primeros tiempos simulados
head(tiempos1)
head(tiempos2)
plot(tiempos1)
plot(tiempos2)
plot(tiempos1, seq(1, length(tiempos1), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1))))
plot(tiempos1, seq(1, length(tiempos1), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1)))
plot(tiempos1, seq(1, length(tiempos1), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1)))
plot(tiempos2, seq(1, length(tiempos2), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos2)+1)))
plot(tiempos1, seq(1, length(tiempos1), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1)))
plot(tiempos2, seq(1, length(tiempos2), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos2)+1)))
plot(tiempos1, seq(1, length(tiempos1), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1)))
plot(tiempos2, seq(1, length(tiempos2), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos2)+1)))
plot(tiempos1, seq(1, length(tiempos1), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1)),
xlab = "Tiempo", ylab = "Número de eventos", main = "Proceso de Poisson no Homogéneo", lwd = 0.8)
plot(tiempos1, seq(1, length(tiempos1), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1)),
xlab = "Tiempo", ylab = "Número de eventos", main = "Proceso de Poisson no Homogéneo", swd = 0.8)
plot(tiempos1, seq(1, length(tiempos1), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1)),
xlab = "Tiempo", ylab = "Número de eventos", main = "Proceso de Poisson no Homogéneo", lwd = 0.5)
plot(tiempos1, seq(1, length(tiempos1), type = "s",
plot(tiempos1, seq(1, length(tiempos1), type = "s",
xlab = "Tiempo", ylab = "Número de eventos", main = "Proceso de Poisson no Homogéneo", lwd = 0.5))
)
plot(tiempos1, seq(1, length(tiempos1)), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1),
xlab = "Tiempo", ylab = "Número de eventos", main = "Proceso de Poisson no Homogéneo", lwd = 0.5)
plot(tiempos2, seq(1, length(tiempos2)), type = "s", xlim = c(0, 5000), ylim = c(0, length(tiempos2)+1),
xlab = "Tiempo", ylab = "Número de eventos", main = "Proceso de Poisson no Homogéneo", lwd = 0.5)
plot(tiempos1, seq(1, length(tiempos1)), type = "l", xlim = c(0, 5000), ylim = c(0, length(tiempos1)+1),
xlab = "Tiempo", ylab = "Número de eventos", main = "Proceso de Poisson no Homogéneo", lwd = 0.5)
# Función para la intensidad lambda1(t)
lambda_1 <- function(t) {
return(exp(-t / 5) + t / 5)
}
# Función para la intensidad lambda2(t)
lambda_2 <- function(t) {
return((1/2) * sqrt(t / 2))
}
# Función para simular el proceso de Poisson no homogéneo
simulate_non_homogeneous_process <- function(lambda_func, Time) {
# Inicialización del vector de tiempos de llegada
PP <- numeric(1)
PP[1] <- 0  # Comenzando en el tiempo 0
i <- 1
while (PP[i] < Time) {
# Generar un tiempo candidato usando la cota superior de lambda_func
t <- PP[i] - (1 / lambda_func(PP[i]) * log(1 - runif(1)))
# Paso de aceptación-rechazo
if (runif(1) <= lambda_func(t) / lambda_func(PP[i])) {
i <- i + 1
PP[i] <- t
}
}
# Eliminar el último elemento si excede el intervalo de tiempo
if (PP[i] > Time) {
PP <- PP[-i]
}
return(PP)
}
# Intervalo de simulación
Time <- 5000
# Simulación del proceso de Poisson no homogéneo con lambda1(t)
PP1 <- simulate_non_homogeneous_process(lambda_1, Time)
# Simulación del proceso de Poisson no homogéneo con lambda2(t)
PP2 <- simulate_non_homogeneous_process(lambda_2, Time)
# Graficar los resultados
par(mfrow=c(2,1))  # Dos gráficos en una fila
plot(PP1, seq(1, length(PP1)), type='s', xlab="Tiempo", ylab="Número de llegadas en [0,T]",
main="Camino de muestra del proceso de Poisson no homogéneo con lambda1(t)", xlim=c(0, Time), ylim=c(0, length(PP1)+1))
plot(PP2, seq(1, length(PP2)), type='s', xlab="Tiempo", ylab="Número de llegadas en [0,T]",
main="Camino de muestra del proceso de Poisson no homogéneo con lambda2(t)", xlim=c(0, Time), ylim=c(0, length(PP2)+1))
# Función para la intensidad lambda1(t)
lambda_1 <- function(t) {
return(exp(-t / 5) + (t / 5))
}
# Función para la intensidad lambda2(t)
lambda_2 <- function(t) {
return((1/2) * sqrt(t / 2))
}
# Función para simular el proceso de Poisson no homogéneo
simulate_non_homogeneous_process <- function(lambda_func, Time) {
# Inicialización del vector de tiempos de llegada
PP <- numeric(1)
PP[1] <- 0  # Comenzando en el tiempo 0
i <- 1
while (PP[i] < Time) {
# Generar un tiempo candidato usando la cota superior de lambda_func
t <- PP[i] - (1 / lambda_func(PP[i]) * log(1 - runif(1)))
# Paso de aceptación-rechazo
if (runif(1) <= lambda_func(t) / lambda_func(PP[i])) {
i <- i + 1
PP[i] <- t
}
}
# Eliminar el último elemento si excede el intervalo de tiempo
if (PP[i] > Time) {
PP <- PP[-i]
}
return(PP)
}
# Intervalo de simulación
Time <- 5000
# Simulación del proceso de Poisson no homogéneo con lambda1(t)
PP1 <- simulate_non_homogeneous_process(lambda_1, Time)
# Simulación del proceso de Poisson no homogéneo con lambda2(t)
PP2 <- simulate_non_homogeneous_process(lambda_2, Time)
# Graficar los resultados
par(mfrow=c(2,1))  # Dos gráficos en una fila
plot(PP1, seq(1, length(PP1)), type='s', xlab="Tiempo", ylab="Número de llegadas en [0,T]",
main="Camino de muestra del proceso de Poisson no homogéneo con lambda1(t)", xlim=c(0, Time), ylim=c(0, length(PP1)+1))
plot(PP2, seq(1, length(PP2)), type='s', xlab="Tiempo", ylab="Número de llegadas en [0,T]",
main="Camino de muestra del proceso de Poisson no homogéneo con lambda2(t)", xlim=c(0, Time), ylim=c(0, length(PP2)+1))
# Función para simular el proceso de nacimiento puro
simulate_birth_process <- function(lambda, T) {
# Inicialización del vector de tiempos de llegada
PP <- numeric(1)
PP[1] <- 0  # Comenzando en el tiempo 0
i <- 1
while(PP[i] < T) {
i <- i + 1
PP <- c(PP, PP[i-1] - (1 / lambda) * log(1 - runif(1)))
}
# Eliminar el último elemento si excede el intervalo de tiempo
if (PP[i] > T) {
PP <- PP[-i]
}
return(PP)
}
PP <- numeric(1)
PP[1] <- 0.00001
I <- 1
while(PP[i] < time){
i <- i + 1
PP[i] <- c(PP, PP[i-1] - ( 1/lambda) * log(1 - runif(1)))
}
i <- 1
while(PP[i] < time){
i <- i + 1
PP[i] <- c(PP, PP[i-1] - ( 1/lambda) * log(1 - runif(1)))
}
while(PP[i] < time){
i <- i + 1
PP[i] <- c(PP, PP[i-1] - ( 1/lambda) * log(1 - runif(1)))
}
PP <- numeric(1)
PP[1] <- 0.00001
i <- 1
while(PP[i] < time){
i <- i + 1
PP[i] <- c(PP, PP[i-1] - ( 1/lambda) * log(1 - runif(1)))
}
lambda <- 2.5
time <- 5000
while(PP[i] < time){
i <- i + 1
PP[i] <- c(PP, PP[i-1] - ( 1/lambda) * log(1 - runif(1)))
}
time <- 10
while(PP[i] < time){
i <- i + 1
PP[i] <- c(PP, PP[i-1] - ( 1/lambda) * log(1 - runif(1)))
}
PP <- numeric(1)
PP[1] <- 0.00001
i <- 1
while(PP[i] < time){
i <- i + 1
PP[i] <- c(PP, PP[i-1] - ( 1/lambda) * log(1 - runif(1)))
}
# Función para generar un proceso de Poisson no homogéneo
simulate_nhpp <- function(lambda_func, T_max) {
# Paso 1: Obtener la tasa máxima lambda_max
time_grid <- seq(0, T_max, by = 0.01)
lambda_max <- max(lambda_func(time_grid))
# Paso 2: Inicialización
t <- 0
events <- c()
while (t < T_max) {
# Paso 3: Generar un tiempo inter-arrival
u <- runif(1)
t <- t - log(u) / lambda_max
if (t > T_max) break
# Paso 4: Aceptación-Rechazo
u2 <- runif(1)
if (u2 <= lambda_func(t) / lambda_max) {
events <- c(events, t)
}
}
return(events)
}
# Intensidades lambda1 y lambda2
lambda1 <- function(t) { exp(-t / 5) + t / 5 }
lambda2 <- function(t) { 0.5 * sqrt(t / 2) }
# Simulación en el intervalo [0, 5000]
set.seed(42) # Para reproducibilidad
T_max <- 5000
events_lambda1 <- simulate_nhpp(lambda1, T_max)
# Función para simular un proceso de nacimiento puro
simular_nacimiento_puro <- function(lambda_func, T) {
t <- 0
eventos <- c()
while (t < T) {
# Encontrar lambda_max en el intervalo [0, T]
lambda_max <- max(lambda_func(seq(0, T, length.out = 1000)))
# Generar el tiempo de llegada
u1 <- runif(1)
t <- t - log(u1) / lambda_max
if (t > T) break
# Generar el tiempo de espera y aceptar o rechazar el evento
u2 <- runif(1)
if (u2 <= lambda_func(t) / lambda_max) {
eventos <- c(eventos, t)
}
}
return(eventos)
}
# Definir las funciones de intensidad para ambos casos
lambda1 <- function(t) {
return(1 * 5)  # Tasa constante para el caso 1
}
lambda2 <- function(t) {
return(5 * 5)  # Tasa constante para el caso 2
}
# Simular el proceso de nacimiento puro para ambos casos
set.seed(123)
eventos1 <- simular_nacimiento_puro(lambda1, 50)
eventos2 <- simular_nacimiento_puro(lambda2, 50)
# Comparar los dos casos
summary(eventos1)
summary(eventos2)
# Graficar histogramas de los tiempos de llegada
par(mfrow = c(2, 1))
hist(eventos1, breaks = 50, main = "Histograma de Tiempos del Caso 1", xlab = "Tiempo", col = "lightblue", border = "black")
hist(eventos2, breaks = 50, main = "Histograma de Tiempos del Caso 2", xlab = "Tiempo", col = "lightcoral", border = "black")
# Graficar las funciones de densidad
par(mfrow = c(2, 1))
plot(density(eventos1), main = "Densidad de Eventos del Caso 1", xlab = "Tiempo", ylab = "Densidad", col = "blue", lwd = 2)
plot(density(eventos2), main = "Densidad de Eventos del Caso 2", xlab = "Tiempo", ylab = "Densidad", col = "red", lwd = 2)
